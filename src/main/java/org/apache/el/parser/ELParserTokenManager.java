/* Generated By:JJTree&JavaCC: Do not edit this line. ELParserTokenManager.java */
package org.apache.el.parser;

import java.util.Arrays;

/**
 * Token Manager.
 */
@SuppressWarnings("all") // Ignore warnings in generated code
public class ELParserTokenManager implements ELParserConstants {

    /**
     * Debug output.
     */
    public java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0xcL) != 0L) {
                    jjmatchedKind = LITERAL_EXPRESSION;
                    return 5;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, String kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case '#':
                return jjMoveStringLiteralDfa1_0(0x8L);
            case '$':
                return jjMoveStringLiteralDfa1_0(0x4L);
            default:
                return jjMoveNfa_0(7, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case '{':
                if ((active0 & 0x4L) != 0L)
                    return jjStopAtPos(1, START_DYNAMIC_EXPRESSION); // ${
                else if ((active0 & 0x8L) != 0L)
                    return jjStopAtPos(1, START_DEFERRED_EXPRESSION); // #{
                break;
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    static final long[] jjbitVec0 = {
            0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec2 = {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 8;
        int i = 1;
        jjstateSet[0] = startState;
        String kind = "0x7fffffff";
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 7:
                            if ((0xffffffe7ffffffffL & l) != 0L) {          // 如果 0 ~ 63 , curChar 非 # $
                                if (ELParser.getKindPos(kind) > 1)
                                    kind = ELParserConstants.LITERAL_EXPRESSION;
                                jjCheckNAddStates(0, 4);
                            } else if ((0x1800000000L & l) != 0L) {         // 如果curChar 为 # $
                                if (ELParser.getKindPos(kind) > 1)
                                    kind = ELParserConstants.LITERAL_EXPRESSION;
                                jjCheckNAdd(5);
                            }
                            if ((0xffffffe7ffffffffL & l) != 0L)            // 如果curChar 非 # $
                                jjCheckNAddTwoStates(0, 1);
                            break;
                        case 0:
                            if ((0xffffffe7ffffffffL & l) != 0L)            // 如果curChar 非 # $
                                jjCheckNAddTwoStates(0, 1);
                            break;
                        case 2:
                            if ((0xffffffe7ffffffffL & l) == 0L)            // 如果curChar 为 # $
                                break;
                            if (ELParser.getKindPos(kind) > 1)
                                kind = ELParserConstants.LITERAL_EXPRESSION;
                            jjCheckNAddStates(0, 4);
                            break;
                        case 3:
                            if ((0xffffffe7ffffffffL & l) != 0L)            // 如果curChar 非 # $
                                jjCheckNAddTwoStates(3, 4);
                            break;
                        case 4:
                            if ((0x1800000000L & l) != 0L)                  // 如果curChar 为 # $
                                jjCheckNAdd(5);
                            break;
                        case 5:
                            if ((0xffffffe7ffffffffL & l) == 0L)            // 如果curChar 为 # $
                                break;
                            if (ELParser.getKindPos(kind) > 1)
                                kind = ELParserConstants.LITERAL_EXPRESSION;
                            jjCheckNAddStates(5, 8);
                            break;
                        case 6:
                            if ((0x1800000000L & l) == 0L)                  // 如果curChar 非 # $
                                break;
                            if (ELParser.getKindPos(kind) > 1)
                                kind = ELParserConstants.LITERAL_EXPRESSION;
                            jjCheckNAddStates(9, 13);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 7:
                            if (ELParser.getKindPos(kind) > 1)
                                kind = ELParserConstants.LITERAL_EXPRESSION;
                            jjCheckNAddStates(0, 4);
                            if ((0xffffffffefffffffL & l) != 0L)   // 如果curChar 为 @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~ 
                                jjCheckNAddTwoStates(0, 1);
                            else if (curChar == 92) {                           // 反斜杠 \
                                if (ELParser.getKindPos(kind) > 1)
                                    kind = ELParserConstants.LITERAL_EXPRESSION;
                                jjCheckNAddStates(14, 17);
                            }
                            break;
                        case 0:
                            if ((0xffffffffefffffffL & l) != 0L) //如果curChar 为 @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~ 
                                jjCheckNAddTwoStates(0, 1);
                            break;
                        case 1:
                            if (curChar != 92)                          // 反斜杠 \
                                break;
                            if (ELParser.getKindPos(kind) > 1)
                                kind = ELParserConstants.LITERAL_EXPRESSION;
                            jjCheckNAddStates(14, 17);
                            break;
                        case 2:
                            if (ELParser.getKindPos(kind) > 1)
                                kind = ELParserConstants.LITERAL_EXPRESSION;
                            jjCheckNAddStates(0, 4);
                            break;
                        case 3:
                            jjCheckNAddTwoStates(3, 4);
                            break;
                        case 5:
                            if ((0xf7ffffffefffffffL & l) == 0L)            // 如果curChar 为 \ {
                                break;
                            if (ELParser.getKindPos(kind) > 1)
                                kind = ELParserConstants.LITERAL_EXPRESSION;
                            jjCheckNAddStates(5, 8);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 7:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjCheckNAddTwoStates(0, 1);
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2)) {
                                if (ELParser.getKindPos(kind) > 1)
                                    kind = ELParserConstants.LITERAL_EXPRESSION;
                                jjCheckNAddStates(0, 4);
                            }
                            break;
                        case 0:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjCheckNAddTwoStates(0, 1);
                            break;
                        case 2:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (ELParser.getKindPos(kind) > 1)
                                kind = ELParserConstants.LITERAL_EXPRESSION;
                            jjCheckNAddStates(0, 4);
                            break;
                        case 3:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                                jjCheckNAddTwoStates(3, 4);
                            break;
                        case 5:
                            if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                                break;
                            if (ELParser.getKindPos(kind) > 1)
                                kind = ELParserConstants.LITERAL_EXPRESSION;
                            jjCheckNAddStates(5, 8);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != default_jjmatchedKind) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = "0x7fffffff";
            }
            ++curPos;
            i = jjnewStateCnt;
            jjnewStateCnt = startsAt;
            startsAt = 8 - startsAt;
            //if ((i = jjnewStateCnt) == (startsAt = 8 - (jjnewStateCnt = startsAt)))
            if(i == startsAt)
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    private final int jjStopStringLiteralDfa_1(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x10000L) != 0L)
                    return 1;
                if ((active0 & 0x5075555007000L) != 0L) {
                    jjmatchedKind = IDENTIFIER;
                    return 30;
                }
                return -1;
            case 1:
                if ((active0 & 0x5065000007000L) != 0L) {
                    jjmatchedKind = IDENTIFIER;
                    jjmatchedPos = 1;
                    return 30;
                }
                if ((active0 & 0x10555000000L) != 0L)
                    return 30;
                return -1;
            case 2:
                if ((active0 & 0x5005000000000L) != 0L)
                    return 30;
                if ((active0 & 0x60000007000L) != 0L) {
                    jjmatchedKind = IDENTIFIER;
                    jjmatchedPos = 2;
                    return 30;
                }
                return -1;
            case 3:
                if ((active0 & 0x5000L) != 0L)
                    return 30;
                if ((active0 & 0x60000002000L) != 0L) {
                    jjmatchedKind = IDENTIFIER;
                    jjmatchedPos = 3;
                    return 30;
                }
                return -1;
            case 4:
                if ((active0 & 0x40000000000L) != 0L) {
                    jjmatchedKind = IDENTIFIER;
                    jjmatchedPos = 4;
                    return 30;
                }
                if ((active0 & 0x20000002000L) != 0L)
                    return 30;
                return -1;
            case 5:
                if ((active0 & 0x40000000000L) != 0L) {
                    jjmatchedKind = IDENTIFIER;
                    jjmatchedPos = 5;
                    return 30;
                }
                return -1;
            case 6:
                if ((active0 & 0x40000000000L) != 0L) {
                    jjmatchedKind = IDENTIFIER;
                    jjmatchedPos = 6;
                    return 30;
                }
                return -1;
            case 7:
                if ((active0 & 0x40000000000L) != 0L) {
                    jjmatchedKind = IDENTIFIER;
                    jjmatchedPos = 7;
                    return 30;
                }
                return -1;
            case 8:
                if ((active0 & 0x40000000000L) != 0L) {
                    jjmatchedKind = IDENTIFIER;
                    jjmatchedPos = 8;
                    return 30;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_1(int pos, long active0) {
        return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0), pos + 1);
    }

    private int jjMoveStringLiteralDfa0_1() {
        switch (curChar) {
            case '!':
                jjmatchedKind = NOT0;       // !
                return jjMoveStringLiteralDfa1_1(0x200000000L);
            case '%':
                return jjStopAtPos(0, MOD0);
            case '&':
                return jjMoveStringLiteralDfa1_1(0x2000000000L);
            case '(':
                return jjStopAtPos(0, LPAREN);
            case ')':
                return jjStopAtPos(0, RPAREN);
            case '*':
                return jjStopAtPos(0, MULT);
            case '+':
                return jjStopAtPos(0, PLUS);
            case ',':
                return jjStopAtPos(0, COMMA);
            case '-':
                return jjStopAtPos(0, MINUS);
            case '.':
                return jjStartNfaWithStates_1(0, DOT, 1);
            case '/':
                return jjStopAtPos(0, DIV0);
            case ':':
                return jjStopAtPos(0, COLON);
            case '<':
                jjmatchedKind = LT0;
                return jjMoveStringLiteralDfa1_1(0x20000000L);
            case '=':
                return jjMoveStringLiteralDfa1_1(0x80000000L);
            case '>':
                jjmatchedKind = GT0;
                return jjMoveStringLiteralDfa1_1(0x8000000L);
            case '?':
                return jjStopAtPos(0, QUESTIONMARK); // ?
            case '[':
                return jjStopAtPos(0, LBRACK); // [
            case ']':
                return jjStopAtPos(0, RBRACK); // ]
            case 'a':
                return jjMoveStringLiteralDfa1_1(0x4000000000L);
            case 'd':
                return jjMoveStringLiteralDfa1_1(0x1000000000000L);
            case 'e':
                return jjMoveStringLiteralDfa1_1(0x20100000000L);
            case 'f':
                return jjMoveStringLiteralDfa1_1(0x2000L);
            case 'g':
                return jjMoveStringLiteralDfa1_1(0x11000000L);
            case 'i':
                return jjMoveStringLiteralDfa1_1(0x40000000000L);
            case 'l':
                return jjMoveStringLiteralDfa1_1(0x44000000L);
            case 'm':
                return jjMoveStringLiteralDfa1_1(0x4000000000000L);
            case 'n':
                return jjMoveStringLiteralDfa1_1(0x1400004000L);
            case 'o':
                return jjMoveStringLiteralDfa1_1(0x10000000000L);
            case 't':
                return jjMoveStringLiteralDfa1_1(0x1000L);
            case '|':
                return jjMoveStringLiteralDfa1_1(0x8000000000L);
            case '}':
                return jjStopAtPos(0, END_EXPRESSION);  // }
            default:
                return jjMoveNfa_1(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_1(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(0, active0);
            return 1;
        }
        switch (curChar) {
            case '&':
                if ((active0 & 0x2000000000L) != 0L)
                    return jjStopAtPos(1, AND0);               // &&
                break;
            case '=':
                if ((active0 & 0x8000000L) != 0L)                   // >=
                    return jjStopAtPos(1, GE0);
                else if ((active0 & 0x20000000L) != 0L)             // <=
                    return jjStopAtPos(1, LE0);
                else if ((active0 & 0x80000000L) != 0L)             // ==
                    return jjStopAtPos(1, EQ0);
                else if ((active0 & 0x200000000L) != 0L)            // !
                    return jjStopAtPos(1, NE0);
                break;
            case 'a':
                return jjMoveStringLiteralDfa2_1(active0, 0x2000L);
            case 'e':
                if ((active0 & 0x10000000L) != 0L)
                    return jjStartNfaWithStates_1(1, GE1, 30);  // ge
                else if ((active0 & 0x40000000L) != 0L)
                    return jjStartNfaWithStates_1(1, LE1, 30);  // le
                else if ((active0 & 0x400000000L) != 0L)        //
                    return jjStartNfaWithStates_1(1, NE1, 30);  // ne
                break;
            case 'i':
                return jjMoveStringLiteralDfa2_1(active0, 0x1000000000000L);
            case 'm':
                return jjMoveStringLiteralDfa2_1(active0, 0x20000000000L);
            case 'n':
                return jjMoveStringLiteralDfa2_1(active0, 0x44000000000L);
            case 'o':
                return jjMoveStringLiteralDfa2_1(active0, 0x4001000000000L);
            case 'q':
                if ((active0 & 0x100000000L) != 0L)
                    return jjStartNfaWithStates_1(1, EQ1, 30);      // eq
                break;
            case 'r':
                if ((active0 & 0x10000000000L) != 0L)
                    return jjStartNfaWithStates_1(1, OR1, 30);      // or
                return jjMoveStringLiteralDfa2_1(active0, 0x1000L);
            case 't':
                if ((active0 & 0x1000000L) != 0L)
                    return jjStartNfaWithStates_1(1, GT1, 30);      // gt
                else if ((active0 & 0x4000000L) != 0L)
                    return jjStartNfaWithStates_1(1, LT1, 30);      // lt
                break;
            case 'u':
                return jjMoveStringLiteralDfa2_1(active0, 0x4000L);
            case '|':
                if ((active0 & 0x8000000000L) != 0L)
                    return jjStopAtPos(1, OR0);                            // ||
                break;
            default:
                break;
        }
        return jjStartNfa_1(0, active0);
    }

    private int jjMoveStringLiteralDfa2_1(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_1(0, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(1, active0);
            return 2;
        }
        switch (curChar) {
            case 'd':
                if ((active0 & 0x4000000000L) != 0L)
                    return jjStartNfaWithStates_1(2, AND1, 30);     // and
                else if ((active0 & 0x4000000000000L) != 0L)
                    return jjStartNfaWithStates_1(2, MOD1, 30);     // mod
                break;
            case 'l':
                return jjMoveStringLiteralDfa3_1(active0, 0x6000L);
            case 'p':
                return jjMoveStringLiteralDfa3_1(active0, 0x20000000000L);
            case 's':
                return jjMoveStringLiteralDfa3_1(active0, 0x40000000000L);
            case 't':
                if ((active0 & 0x1000000000L) != 0L)
                    return jjStartNfaWithStates_1(2, NOT1, 30);
                break;
            case 'u':
                return jjMoveStringLiteralDfa3_1(active0, 0x1000L);
            case 'v':
                if ((active0 & 0x1000000000000L) != 0L)
                    return jjStartNfaWithStates_1(2, DIV1, 30);
                break;
            default:
                break;
        }
        return jjStartNfa_1(1, active0);
    }

    private int jjMoveStringLiteralDfa3_1(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_1(1, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(2, active0);
            return 3;
        }
        switch (curChar) {
            case 'e':
                if ((active0 & 0x1000L) != 0L)
                    return jjStartNfaWithStates_1(3, TRUE, 30);
                break;
            case 'l':
                if ((active0 & 0x4000L) != 0L)
                    return jjStartNfaWithStates_1(3, NULL, 30);
                break;
            case 's':
                return jjMoveStringLiteralDfa4_1(active0, 0x2000L);
            case 't':
                return jjMoveStringLiteralDfa4_1(active0, 0x60000000000L);
            default:
                break;
        }
        return jjStartNfa_1(2, active0);
    }

    private int jjMoveStringLiteralDfa4_1(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_1(2, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(3, active0);
            return 4;
        }
        switch (curChar) {
            case 'a':
                return jjMoveStringLiteralDfa5_1(active0, 0x40000000000L);
            case 'e':
                if ((active0 & 0x2000L) != 0L)
                    return jjStartNfaWithStates_1(4, FALSE, 30);
                break;
            case 'y':
                if ((active0 & 0x20000000000L) != 0L)
                    return jjStartNfaWithStates_1(4, EMPTY, 30);
                break;
            default:
                break;
        }
        return jjStartNfa_1(3, active0);
    }

    private int jjMoveStringLiteralDfa5_1(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_1(3, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(4, active0);
            return 5;
        }
        switch (curChar) {
            case 'n':
                return jjMoveStringLiteralDfa6_1(active0, 0x40000000000L);
            default:
                break;
        }
        return jjStartNfa_1(4, active0);
    }

    private int jjMoveStringLiteralDfa6_1(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_1(4, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(5, active0);
            return 6;
        }
        switch (curChar) {
            case 'c':
                return jjMoveStringLiteralDfa7_1(active0, 0x40000000000L);
            default:
                break;
        }
        return jjStartNfa_1(5, active0);
    }

    private int jjMoveStringLiteralDfa7_1(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_1(5, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(6, active0);
            return 7;
        }
        switch (curChar) {
            case 'e':
                return jjMoveStringLiteralDfa8_1(active0, 0x40000000000L);
            default:
                break;
        }
        return jjStartNfa_1(6, active0);
    }

    private int jjMoveStringLiteralDfa8_1(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_1(6, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(7, active0);
            return 8;
        }
        switch (curChar) {
            case 'o':
                return jjMoveStringLiteralDfa9_1(active0, 0x40000000000L);
            default:
                break;
        }
        return jjStartNfa_1(7, active0);
    }

    private int jjMoveStringLiteralDfa9_1(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_1(7, old0);
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_1(8, active0);
            return 9;
        }
        switch (curChar) {
            case 'f':
                if ((active0 & 0x40000000000L) != 0L)
                    return jjStartNfaWithStates_1(9, INSTANCEOF, 30);
                break;
            default:
                break;
        }
        return jjStartNfa_1(8, active0);
    }

    private int jjStartNfaWithStates_1(int pos, String kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_1(state, pos + 1);
    }

    static final long[] jjbitVec3 = {
            0x1ff00000fffffffeL, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
    };
    static final long[] jjbitVec4 = {
            0x0L, 0x0L, 0x0L, 0xff7fffffff7fffffL
    };
    static final long[] jjbitVec5 = {
            0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
    };
    static final long[] jjbitVec6 = {
            0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
    };
    static final long[] jjbitVec7 = {
            0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
    };
    static final long[] jjbitVec8 = {
            0x3fffffffffffL, 0x0L, 0x0L, 0x0L
    };

    private int jjMoveNfa_1(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 30;
        int i = 1;
        jjstateSet[0] = startState;
        String kind = "0x7fffffff";
        for (; ; ) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x3ff000000000000L & l) != 0L) {            // 如果curChar 为 0 1 2 3 4 5 6 7 8 9
                                if (ELParser.getKindPos(kind) > 8)
                                    kind = INTEGER_LITERAL;
                                jjCheckNAddStates(18, 22);
                            } else if ((0x1800000000L & l) != 0L) {           // 如果curChar 为 # $
                                if (ELParser.getKindPos(kind) > 51)
                                    kind = IDENTIFIER;
                                jjCheckNAddTwoStates(28, 29);
                            } else if (curChar == '\'')
                                jjCheckNAddStates(23, 25);
                            else if (curChar == '\"')
                                jjCheckNAddStates(26, 28);
                            else if (curChar == '.')
                                jjCheckNAdd(1);
                            break;
                        case 30:
                            if ((0x3ff001000000000L & l) != 0L) {                // 如果curChar 为 $ 0 1 2 3 4 5 6 7 8 9
                                if (ELParser.getKindPos(kind) > 52)
                                    kind = FUNCTIONSUFFIX;
                                jjCheckNAdd(29);
                            }
                            if ((0x3ff001000000000L & l) != 0L) {               // 如果curChar 为 $ 0 1 2 3 4 5 6 7 8 9
                                if (ELParser.getKindPos(kind) > 51)
                                    kind = IDENTIFIER;
                                jjCheckNAdd(28);
                            }
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (ELParser.getKindPos(kind) > 9)                  // 如果curChar 为 0 1 2 3 4 5 6 7 8 9
                                kind = FLOATING_POINT_LITERAL;
                            jjCheckNAddTwoStates(1, 2);
                            break;
                        case 3:
                            if ((0x280000000000L & l) != 0L)                    // 如果curChar 为 + -
                                jjCheckNAdd(4);
                            break;
                        case 4:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (ELParser.getKindPos(kind) > 9)                  // 如果curChar 为 0 1 2 3 4 5 6 7 8 9
                                kind = FLOATING_POINT_LITERAL;
                            jjCheckNAdd(4);
                            break;
                        case 5:
                            if (curChar == 34)                                  // 双引号
                                jjCheckNAddStates(26, 28);
                            break;
                        case 6:
                            if ((0xfffffffbffffffffL & l) != 0L)                // 如果curChar 非 "
                                jjCheckNAddStates(26, 28);
                            break;
                        case 8:
                            if ((0x8400000000L & l) != 0L)                      // 如果curChar 为 " '
                                jjCheckNAddStates(26, 28);
                            break;
                        case 9:
                            if (curChar == 34 && ELParser.getKindPos(kind) > 11)    // 如果curChar 为双引号
                                kind = STRING_LITERAL;
                            break;
                        case 10:
                            if (curChar == 39)                                     // 单引号
                                jjCheckNAddStates(23, 25);
                            break;
                        case 11:
                            // 如果curChar 非 '
                            if ((0xffffff7fffffffffL & l) != 0L)
                                jjCheckNAddStates(23, 25);
                            break;
                        case 13:
                            if ((0x8400000000L & l) != 0L)                          // 如果curChar 为 " '
                                jjCheckNAddStates(23, 25);
                            break;
                        case 14:
                            if (curChar == 39 && ELParser.getKindPos(kind) > 11)    // 单引号
                                kind = STRING_LITERAL;
                            break;
                        case 15:
                            // 如果curChar 非 0 1 2 3 4 5 6 7 8 9
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (ELParser.getKindPos(kind) > 8)
                                kind = INTEGER_LITERAL;
                            jjCheckNAddStates(18, 22);
                            break;
                        case 16:
                            if ((0x3ff000000000000L & l) == 0L)            // 如果curChar 非 0 1 2 3 4 5 6 7 8 9
                                break;
                            if (ELParser.getKindPos(kind) > 8)
                                kind = INTEGER_LITERAL;
                            jjCheckNAdd(16);
                            break;
                        case 17:
                            if ((0x3ff000000000000L & l) != 0L)             // 如果curChar 为 0 1 2 3 4 5 6 7 8 9
                                jjCheckNAddTwoStates(17, 18);
                            break;
                        case 18:
                            if (curChar != 46)                              // . 小数点
                                break;
                            if (ELParser.getKindPos(kind) > 9)
                                kind = FLOATING_POINT_LITERAL;
                            jjCheckNAddTwoStates(19, 20);
                            break;
                        case 19:
                            if ((0x3ff000000000000L & l) == 0L)                  // 如果curChar 非 0 1 2 3 4 5 6 7 8 9
                                break;
                            if (ELParser.getKindPos(kind) > 9)
                                kind = FLOATING_POINT_LITERAL;
                            jjCheckNAddTwoStates(19, 20);
                            break;
                        case 21:
                            if ((0x280000000000L & l) != 0L)                // 如果curChar 为 + -
                                jjCheckNAdd(22);
                            break;
                        case 22:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (ELParser.getKindPos(kind) > 9)              // 如果curChar 为 0 1 2 3 4 5 6 7 8 9
                                kind = FLOATING_POINT_LITERAL;
                            jjCheckNAdd(22);
                            break;
                        case 23:
                            if ((0x3ff000000000000L & l) != 0L)             // 如果curChar 为 0 1 2 3 4 5 6 7 8 9
                                jjCheckNAddTwoStates(23, 24);
                            break;
                        case 25:
                            if ((0x280000000000L & l) != 0L)                // 如果curChar 为 + -
                                jjCheckNAdd(26);
                            break;
                        case 26:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (ELParser.getKindPos(kind) > 9)              // 如果curChar 为 0 1 2 3 4 5 6 7 8 9
                                kind = FLOATING_POINT_LITERAL;
                            jjCheckNAdd(26);
                            break;
                        case 27:
                            if ((0x1800000000L & l) == 0L)
                                break;
                            if (ELParser.getKindPos(kind) > 51)             // 如果curChar 为 # $
                                kind = IDENTIFIER;
                            jjCheckNAddTwoStates(28, 29);
                            break;
                        case 28:
                            if ((0x3ff001000000000L & l) == 0L)
                                break;
                            if (ELParser.getKindPos(kind) > 51)             // 如果curChar 为 $ 0 1 2 3 4 5 6 7 8 9
                                kind = IDENTIFIER;
                            jjCheckNAdd(28);
                            break;
                        case 29:
                            if ((0x3ff001000000000L & l) == 0L)
                                break;
                            if (ELParser.getKindPos(kind) > 52)             // 如果curChar 为 $ 0 1 2 3 4 5 6 7 8 9
                                kind = FUNCTIONSUFFIX;
                            jjCheckNAdd(29);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x7fffffe87fffffeL & l) == 0L)             // 如果curChar 为 ; < = > ? @ [ \ ] ^ ` { | } ~ 删除键
                                break;
                            if (ELParser.getKindPos(kind) > 51)
                                kind = IDENTIFIER;
                            jjCheckNAddTwoStates(28, 29);
                            break;
                        case 30:
                            // 如果curChar 为 ; < = > ? @ [ \ ] ^ ` { | } ~ 删除键
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (ELParser.getKindPos(kind) > 52)
                                    kind = FUNCTIONSUFFIX;
                                jjCheckNAdd(29);
                            }
                            // 如果curChar 为 ; < = > ? @ [ \ ] ^ ` { | } ~ 删除键
                            if ((0x7fffffe87fffffeL & l) != 0L) {
                                if (ELParser.getKindPos(kind) > 51)
                                    kind = IDENTIFIER;
                                jjCheckNAdd(28);
                            }
                            break;
                        case 2:
                            // 如果curChar 为 % E e
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(29, 30);
                            break;
                        case 6:
                            // 如果curChar 为 ! " # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B C D E F
                            // G H I J K L M N O P Q R S T U V W X Y Z [ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~ 
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(26, 28);
                            break;
                        case 7:
                            if (curChar == 92)      // 反斜杠
                                jjstateSet[jjnewStateCnt++] = 8;
                            break;
                        case 8:
                            if (curChar == 92)      // 反斜杠
                                jjCheckNAddStates(26, 28);
                            break;
                        case 11:
                            // 如果curChar 为 ! " # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B C D E F
                            // G H I J K L M N O P Q R S T U V W X Y Z [ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~ 
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(23, 25);
                            break;
                        case 12:
                            if (curChar == 92)          //  反斜杠
                                jjstateSet[jjnewStateCnt++] = 13;
                            break;
                        case 13:
                            if (curChar == 92)          // 反斜杠
                                jjCheckNAddStates(23, 25);
                            break;
                        case 20:
                            // 如果curChar 为 % E e
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(31, 32);
                            break;
                        case 24:
                            // 如果curChar 为 % E e
                            if ((0x2000000020L & l) != 0L)
                                jjAddStates(33, 34);
                            break;
                        case 28:
                            // 如果curChar 为 ; < = > ? @ [ \ ] ^ ` { | } ~ 
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (ELParser.getKindPos(kind) > 51)
                                kind = IDENTIFIER;
                            jjCheckNAdd(28);
                            break;
                        case 29:
                            // 如果curChar 为 ; < = > ? @ [ \ ] ^ ` { | } ~ 
                            if ((0x7fffffe87fffffeL & l) == 0L)
                                break;
                            if (ELParser.getKindPos(kind) > 52)
                                kind = FUNCTIONSUFFIX;
                            jjCheckNAdd(29);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int hiByte = (int) (curChar >> 8);
                int i1 = hiByte >> 6;
                long l1 = 1L << (hiByte & 077);
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2))   // 如果ASCII 为  128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 215 247
                                break;
                            if (ELParser.getKindPos(kind) > 51)
                                kind = IDENTIFIER;
                            jjCheckNAddTwoStates(28, 29);
                            break;
                        case 30:
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {   // 如果ASCII为 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 248 249 250 251 252 253 254
                                if (ELParser.getKindPos(kind) > 51)
                                    kind = IDENTIFIER;
                                jjCheckNAdd(28);
                            }
                            if (jjCanMove_1(hiByte, i1, i2, l1, l2)) {   // 如果ASCII为 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 248 249 250 251 252 253 254
                                if (ELParser.getKindPos(kind) > 52)
                                    kind = FUNCTIONSUFFIX;
                                jjCheckNAdd(29);
                            }
                            break;
                        case 6:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))   // 如果ASCII 为
                                jjAddStates(26, 28);
                            break;
                        case 11:
                            if (jjCanMove_0(hiByte, i1, i2, l1, l2))    // 如果ASCII 为
                                jjAddStates(23, 25);
                            break;
                        case 28:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2))   // 如果ASCII 为 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 215 247
                                break;
                            if (ELParser.getKindPos(kind) > 51)
                                kind = IDENTIFIER;
                            jjCheckNAdd(28);
                            break;
                        case 29:
                            if (!jjCanMove_1(hiByte, i1, i2, l1, l2))   // 如果ASSCII 为 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 215 247
                                break;
                            if (ELParser.getKindPos(kind) > 52)
                                kind = FUNCTIONSUFFIX;
                            jjCheckNAdd(29);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (!Utils.eq(kind, "0x7fffffff")) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = "0x7fffffff";
            }
            ++curPos;
            i = jjnewStateCnt;
            jjnewStateCnt = startsAt;
            startsAt = 30 - startsAt;
            //if ((i = jjnewStateCnt) == (startsAt = 30 - (jjnewStateCnt = startsAt)))
            if(i == startsAt)
                return curPos;
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {
            0, 1, 3, 4, 2, 0, 1, 4, 2, 0, 1, 4, 5, 2, 0, 1,
            2, 6, 16, 17, 18, 23, 24, 11, 12, 14, 6, 7, 9, 3, 4, 21,
            22, 25, 26,
    };

    private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec2[i2] & l2) != 0L);
            default:
                if ((jjbitVec0[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2) {
        switch (hiByte) {
            case 0:
                return ((jjbitVec4[i2] & l2) != 0L);
            case 48:
                return ((jjbitVec5[i2] & l2) != 0L);
            case 49:
                return ((jjbitVec6[i2] & l2) != 0L);
            case 51:
                return ((jjbitVec7[i2] & l2) != 0L);
            case 61:
                return ((jjbitVec8[i2] & l2) != 0L);
            default:
                if ((jjbitVec3[i1] & l1) != 0L)
                    return true;
                return false;
        }
    }

    /**
     * Token literal values.
     */
// [, null, ${, #{, null, null, null, null, null, null, null, null,
// true, false, null, }, ., (, ),
// [, ], :, ,, >, gt, <, lt, >=, ge, <=, le, ==, eq, !=, ne, !, not, &&, and, ||, or, empty, instanceof, *, +, -, ?, /, div, %, mod, null, null, null, null, null, null]
    public static final String[] jjstrLiteralImages = {
            "", null, "\44\173", "\43\173", null, null, null, null, null, null, null, null,
            "\164\162\165\145", "\146\141\154\163\145", "\156\165\154\154", "\175", "\56", "\50", "\51",
            "\133", "\135", "\72", "\54", "\76", "\147\164", "\74", "\154\164", "\76\75",
            "\147\145", "\74\75", "\154\145", "\75\75", "\145\161", "\41\75", "\156\145", "\41",
            "\156\157\164", "\46\46", "\141\156\144", "\174\174", "\157\162", "\145\155\160\164\171",
            "\151\156\163\164\141\156\143\145\157\146", "\52", "\53", "\55", "\77", "\57", "\144\151\166", "\45", "\155\157\144", null,
            null, null, null, null, null,};

    public static void main(String[] args) {
        System.out.println(Arrays.toString(jjstrLiteralImages));
    }

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
            "DEFAULT",
            "IN_EXPRESSION",
    };

    /**
     * Lex State array.
     */
    public static final int[] jjnewLexState = {
            -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1, -1, -1,
    };
    static final long[] jjtoToken = {
            0x11ffffffffffb0fL,
    };
    static final long[] jjtoSkip = {
            0xf0L,
    };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[30];
    private final int[] jjstateSet = new int[60];
    protected char curChar;

    /**
     * Constructor.
     */
    public ELParserTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public ELParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 30; i-- > 0; )
            jjrounds[i] = 0x80000000;
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if (lexState >= 2 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[ELParser.getKindPos(jjmatchedKind)];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    String jjmatchedKind;


    public final static String default_jjmatchedKind = "0x7fffffff";

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token matchedToken;
         int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = EOF;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            switch (curLexState) {
                case 0:         // 如果当前 curLexState 为 }
                    jjmatchedKind = default_jjmatchedKind;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_0();
                    break;
                case 1:         // 如果当前 curLexState 为 ${ 或 #{
                    try {
                        input_stream.backup(0);
                        // 如果 curChar是 水平制表符 ，换行键，回车键 ，空格时，则重新读取
                        while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
                            curChar = input_stream.BeginToken();
                    } catch (java.io.IOException e1) {
                        continue EOFLoop;
                    }
                    jjmatchedKind = default_jjmatchedKind;
                    jjmatchedPos = 0;
                    curPos = jjMoveStringLiteralDfa0_1();
                    if (jjmatchedPos == 0 && ELParser.getKindPos(jjmatchedKind)> 56) {  // 如果是非法字符
                        jjmatchedKind = ELParserConstants.ILLEGAL_CHARACTER;
                    }
                    break;
            }

            if (!Utils.eq(jjmatchedKind, default_jjmatchedKind)) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);

                int index = ELParser.getKindPos(jjmatchedKind);
                if ((jjtoToken[index >> 6] & (1L << (index & 077))) != 0L) { // 如果非 空格 ,\t ,\n , \r , <EXPONENT>, #, <LETTER>, <DIGIT>  ，则退出循环
                    matchedToken = jjFillToken();
                    // 如果 jjmatchedKind 为 ${ , #{ , } ，则设置当前curLexState为 jjmatchedKind
                    if (jjnewLexState[ELParser.getKindPos(jjmatchedKind)] != -1)
                        curLexState = jjnewLexState[ELParser.getKindPos(jjmatchedKind)];
                    return matchedToken;
                } else { // 如果是 空格 ,\t ,\n , \r , <EXPONENT>, #, <LETTER>, <DIGIT> 则继续循环
                    if (jjnewLexState[ELParser.getKindPos(jjmatchedKind)] != -1)
                        curLexState = jjnewLexState[ELParser.getKindPos(jjmatchedKind)];
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

}
