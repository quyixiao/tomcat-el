/* Generated By:JavaCC: Do not edit this line. SimpleCharStream.java Version 5.0 */
/* JavaCCOptions:STATIC=false,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
package org.apache.el.parser;

import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.lang.reflect.Array;
import java.util.Arrays;

/**
 * An implementation of interface CharStream, where the stream is assumed to
 * contain only ASCII characters (without unicode processing).
 */
@SuppressWarnings("all") // Ignore warnings in generated code
public class SimpleCharStream {
    /**
     * Whether parser is static.
     */
    public static final boolean staticFlag = false;
    int bufsize;                                            // buffer数组的长度
    int available;                                          // buffer的可用长度
    int tokenBegin;                                         // 每一次获取 token时，在 buffer数组的起始位置
    /**
     * Position in buffer.
     */
    public int bufpos = -1;                                 //最后一次读取字符所在buffer数组中的位置
    protected int bufline[];                                //buffer 数组中的每一个字符对应在脚本中的行
    protected int bufcolumn[];                              //buffer 数组中每一个字符对应的列

    protected int column = 0;                               //列下标从0开始
    protected int line = 1;                                 //行下标从1开始

    protected boolean prevCharIsCR = false;
    protected boolean prevCharIsLF = false;

    protected java.io.Reader inputStream;
    public final static int  expandSize=2048;
    public final static int  initSize=4096;

    protected char[] buffer;                                //外部每一次读取的字符缓存数组
    // 每次从 inputStream 中读取的固定长度
    //nextCharBuf索引计数器，每ReadByte()一次，nextCharInd值加1，
    //当maxNextCharInd == nextCharInd 时，inputStream需要再次 reader byte 到nextCharBuf中，直到文件读取结束
    protected int maxNextCharInd = 0;
    protected int inBuf = 0;                                //每次backup回退的byte数
    protected int tabSize = 8;

    protected void setTabSize(int i) {
        tabSize = i;
    }

    protected int getTabSize(int i) {
        return tabSize;
    }


    //此函数主要用于buffer数组扩容
    protected void ExpandBuff(boolean wrapAround) {
        char[] newbuffer = new char[bufsize + expandSize];
        int newbufline[] = new int[bufsize + expandSize];
        int newbufcolumn[] = new int[bufsize + expandSize];

        try {
            if (wrapAround) {
                System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                System.arraycopy(buffer, 0, newbuffer, bufsize - tokenBegin, bufpos);
                buffer = newbuffer;

                System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                System.arraycopy(bufline, 0, newbufline, bufsize - tokenBegin, bufpos);
                bufline = newbufline;

                System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                System.arraycopy(bufcolumn, 0, newbufcolumn, bufsize - tokenBegin, bufpos);
                bufcolumn = newbufcolumn;

                maxNextCharInd = (bufpos += (bufsize - tokenBegin));
            } else {
                System.arraycopy(buffer, tokenBegin, newbuffer, 0, bufsize - tokenBegin);
                buffer = newbuffer;

                System.arraycopy(bufline, tokenBegin, newbufline, 0, bufsize - tokenBegin);
                bufline = newbufline;

                System.arraycopy(bufcolumn, tokenBegin, newbufcolumn, 0, bufsize - tokenBegin);
                bufcolumn = newbufcolumn;

                maxNextCharInd = (bufpos -= tokenBegin);
            }
        } catch (Throwable t) {
            throw new Error(t.getMessage());
        }


        bufsize += expandSize;
        available = bufsize;
        tokenBegin = 0;
    }

    /**
     * Start.
     */
    public char BeginToken() throws java.io.IOException {
        tokenBegin = -1;
        char c = readChar();
        tokenBegin = bufpos;

        return c;
    }

    protected void UpdateLineColumn(char c) {
        column++;

        if (prevCharIsLF) {
            prevCharIsLF = false;
            line += (column = 1);
        } else if (prevCharIsCR) {
            prevCharIsCR = false;
            if (c == '\n') {
                prevCharIsLF = true;
            } else
                line += (column = 1);
        }

        switch (c) {
            case '\r':
                prevCharIsCR = true;
                break;
            case '\n':
                prevCharIsLF = true;
                break;
            case '\t':
                column--;
                column += (tabSize - (column % tabSize));
                break;
            default:
                break;
        }

        bufline[bufpos] = line;
        bufcolumn[bufpos] = column;
    }

    //主要是提供给外部调用，当上一次调用了 backup函数时
    //inBuf > 0 ，此时不再从nextCharBuf数组中读取，而是从缓存buffer中读取
    public char readChar() throws java.io.IOException {
        if (inBuf > 0) {
            --inBuf;

            if (++bufpos == bufsize)
                bufpos = 0;

            return buffer[bufpos];
        }

        if (++bufpos >= maxNextCharInd)
            FillBuff();

        char c = buffer[bufpos];

        UpdateLineColumn(c);
        return c;
    }

    @Deprecated
    /**
     * @deprecated
     * @see #getEndColumn
     */

    public int getColumn() {
        return bufcolumn[bufpos];
    }

    @Deprecated
    /**
     * @deprecated
     * @see #getEndLine
     */

    public int getLine() {
        return bufline[bufpos];
    }

    /**
     * Get token end column number.
     */
    public int getEndColumn() {
        return bufcolumn[bufpos];
    }

    /**
     * Get token end line number.
     */
    public int getEndLine() {
        return bufline[bufpos];
    }

    /**
     * Get token beginning column number.
     */
    public int getBeginColumn() {
        return bufcolumn[tokenBegin];
    }

    /**
     * Get token beginning line number.
     */
    public int getBeginLine() {
        return bufline[tokenBegin];
    }

    /**
     * Backup a number of characters.
     */
    public void backup(int amount) {

        inBuf += amount;
        if ((bufpos -= amount) < 0)
            bufpos += bufsize;
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.Reader dstream, int startline,
                            int startcolumn, int buffersize) {
        inputStream = dstream;
        line = startline;
        column = startcolumn - 1;

        available = bufsize = buffersize;
        buffer = new char[buffersize];
        bufline = new int[buffersize];
        bufcolumn = new int[buffersize];
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.Reader dstream, int startline,
                            int startcolumn) {
        this(dstream, startline, startcolumn, initSize);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.Reader dstream) {
        this(dstream, 1, 1, initSize);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader dstream, int startline,
                       int startcolumn, int buffersize) {
        inputStream = dstream;
        line = startline;
        column = startcolumn - 1;

        if (buffer == null || buffersize != buffer.length) {
            available = bufsize = buffersize;
            buffer = new char[buffersize];
            bufline = new int[buffersize];
            bufcolumn = new int[buffersize];
        }
        prevCharIsLF = prevCharIsCR = false;
        tokenBegin = inBuf = maxNextCharInd = 0;
        bufpos = -1;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader dstream, int startline,
                       int startcolumn) {
        ReInit(dstream, startline, startcolumn, initSize);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader dstream) {
        ReInit(dstream, 1, 1, initSize);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline,
                            int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
        this(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, int startline,
                            int startcolumn, int buffersize) {
        this(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, String encoding, int startline,
                            int startcolumn) throws java.io.UnsupportedEncodingException {
        this(dstream, encoding, startline, startcolumn, initSize);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, int startline,
                            int startcolumn) {
        this(dstream, startline, startcolumn, initSize);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
        this(dstream, encoding, 1, 1, initSize);
    }

    /**
     * Constructor.
     */
    public SimpleCharStream(java.io.InputStream dstream) {
        this(dstream, 1, 1, initSize);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, String encoding, int startline,
                       int startcolumn, int buffersize) throws java.io.UnsupportedEncodingException {
        ReInit(encoding == null ? new java.io.InputStreamReader(dstream) : new java.io.InputStreamReader(dstream, encoding), startline, startcolumn, buffersize);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, int startline,
                       int startcolumn, int buffersize) {
        ReInit(new java.io.InputStreamReader(dstream), startline, startcolumn, buffersize);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, String encoding) throws java.io.UnsupportedEncodingException {
        ReInit(dstream, encoding, 1, 1, initSize);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream) {
        ReInit(dstream, 1, 1, initSize);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, String encoding, int startline,
                       int startcolumn) throws java.io.UnsupportedEncodingException {
        ReInit(dstream, encoding, startline, startcolumn, initSize);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream dstream, int startline,
                       int startcolumn) {
        ReInit(dstream, startline, startcolumn, initSize);
    }

    /**
     * Get token literal value.
     */
    public String GetImage() {
        if (bufpos >= tokenBegin)
            return new String(buffer, tokenBegin, bufpos - tokenBegin + 1);
        else
            return new String(buffer, tokenBegin, bufsize - tokenBegin) +
                    new String(buffer, 0, bufpos + 1);
    }

    /**
     * Get the suffix.
     */
    public char[] GetSuffix(int len) {
        char[] ret = new char[len];

        if ((bufpos + 1) >= len)
            System.arraycopy(buffer, bufpos - len + 1, ret, 0, len);
        else {
            System.arraycopy(buffer, bufsize - (len - bufpos - 1), ret, 0,
                    len - bufpos - 1);
            System.arraycopy(buffer, 0, ret, len - bufpos - 1, bufpos + 1);
        }

        return ret;
    }

    /**
     * Reset buffer when finished.
     */
    public void Done() {
        buffer = null;
        bufline = null;
        bufcolumn = null;
    }

    /**
     * Method to adjust line and column numbers for the start of a token.
     */
    public void adjustBeginLineColumn(int newLine, int newCol) {
        int start = tokenBegin;
        int len;

        if (bufpos >= tokenBegin) {
            len = bufpos - tokenBegin + inBuf + 1;
        } else {
            len = bufsize - tokenBegin + bufpos + 1 + inBuf;
        }

        int i = 0, j = 0, k = 0;
        int nextColDiff = 0, columnDiff = 0;

        while (i < len && bufline[j = start % bufsize] == bufline[k = ++start % bufsize]) {
            bufline[j] = newLine;
            nextColDiff = columnDiff + bufcolumn[k] - bufcolumn[j];
            bufcolumn[j] = newCol + columnDiff;
            columnDiff = nextColDiff;
            i++;
        }

        if (i < len) {
            bufline[j] = newLine++;
            bufcolumn[j] = newCol + columnDiff;

            while (i++ < len) {
                if (bufline[j = start % bufsize] != bufline[++start % bufsize])
                    bufline[j] = newLine++;
                else
                    bufline[j] = newLine;
            }
        }

        line = bufline[j];
        column = bufcolumn[j];
    }


    protected void FillBuff() throws java.io.IOException {
        if (maxNextCharInd == available) {

            if (available == bufsize) {
                if (tokenBegin > expandSize) {
                    bufpos = maxNextCharInd = 0;
                    available = tokenBegin;
                } else if (tokenBegin < 0)
                    bufpos = maxNextCharInd = 0;
                else
                    ExpandBuff(false);
            } else if (available > tokenBegin)
                available = bufsize;
            else if ((tokenBegin - available) < expandSize)
                ExpandBuff(true);
            else
                available = tokenBegin;

        }

        int i;
        try {
            if ((i = inputStream.read(buffer, maxNextCharInd, available - maxNextCharInd)) == -1) {
                inputStream.close();
                throw new java.io.IOException();
            } else {
                System.out.println(Arrays.toString(buffer));
                maxNextCharInd += i;
            }
            return;
        } catch (java.io.IOException e) {
            --bufpos;
            backup(0);
            if (tokenBegin == -1)
                tokenBegin = bufpos;
            throw e;
        }
    }


    public static String read(SimpleCharStream jj_input_stream, int p) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < p; i++) {
            try {
                if(i == 7 ){
                    System.out.println(i);
                }
                char a = jj_input_stream.BeginToken();
                sb.append(a + "");
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return sb.toString();
    }


    public static void test1() throws Exception{
        Reader in = new FileReader("/Users/quyixiao/gitlab/tomcat-el/src/test/el/test4.tsh");
        SimpleCharStream jj_input_stream = new SimpleCharStream(in, 1, 1);

        for(int i = 0 ;i < 6;i ++){
            jj_input_stream.readChar();
        }

        jj_input_stream.BeginToken();

        jj_input_stream.readChar();
        jj_input_stream.readChar();
        jj_input_stream.readChar();
        jj_input_stream.readChar();
        jj_input_stream.readChar();
        jj_input_stream.readChar();
        jj_input_stream.readChar();
        jj_input_stream.readChar();
        jj_input_stream.readChar();
        jj_input_stream.readChar();
        jj_input_stream.readChar();
    }




    public static void test2() throws Exception{
        Reader in = new FileReader("/Users/quyixiao/gitlab/tomcat-el/src/test/el/test4.tsh");
        SimpleCharStream jj_input_stream = new SimpleCharStream(in, 1, 1);


        for(int i = 0 ;i < 4 ;i ++){
            jj_input_stream.readChar();
        }


        jj_input_stream.BeginToken();

        for(int i = 0 ;i  < 6 ;i ++){
            char c = jj_input_stream.readChar();
            System.out.println(c);
        }
        jj_input_stream.readChar();
        jj_input_stream.readChar();
        jj_input_stream.readChar();
        jj_input_stream.BeginToken();
    }



    public static void test3() throws Exception{
        Reader in = new FileReader("/Users/quyixiao/gitlab/tomcat-el/src/test/el/test4.tsh");
        SimpleCharStream jj_input_stream = new SimpleCharStream(in, 1, 1);


        for(int i = 0 ;i < 6 ;i ++){
            System.out.println(jj_input_stream.readChar());
        }

        System.out.println("begin="+jj_input_stream.BeginToken());
        char c = jj_input_stream.readChar();
        System.out.println(c);
        System.out.println(jj_input_stream.readChar());
        System.out.println(jj_input_stream.readChar());
        System.out.println(jj_input_stream.readChar());
        System.out.println("begin="+jj_input_stream.BeginToken());
        System.out.println(jj_input_stream.readChar());
        System.out.println(jj_input_stream.readChar());
        System.out.println(jj_input_stream.readChar());
    }


    public static void main(String[] args)throws Exception {
        test1();
    }


}
/* JavaCC - OriginalChecksum=9ba0db3918bffb8019f00da1e421f339 (do not edit this line) */
